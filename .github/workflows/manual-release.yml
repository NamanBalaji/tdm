name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        type: string
        required: true
      create_draft:
        description: 'Create as draft release'
        type: boolean
        required: false
        default: true

defaults:
  run:
    shell: bash

permissions:
  contents: write

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Validate version format
        run: |
          if ! [[ "${{ inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version format is invalid. Expected format: vX.X.X (e.g., v1.2.3)"
            exit 1
          fi
          echo "Version validation passed: ${{ inputs.version }}"

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if tag already exists
        run: |
          if git rev-parse "${{ inputs.version }}" >/dev/null 2>&1; then
            echo "Error: Tag ${{ inputs.version }} already exists"
            exit 1
          fi
          echo "Tag validation passed: ${{ inputs.version }} does not exist"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test ./...

      - name: Create release directory
        run: mkdir -p dist

      - name: Build for Linux AMD64
        env:
          CGO_ENABLED: 0
          GOOS: linux
          GOARCH: amd64
        run: |
          go build \
            -ldflags="-s -w -X main.version=${{ inputs.version }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -trimpath \
            -tags="netgo osusergo" \
            -o "dist/tdm-linux-amd64" \
            .

      - name: Build for macOS AMD64 (Intel)
        env:
          CGO_ENABLED: 0
          GOOS: darwin
          GOARCH: amd64
        run: |
          go build \
            -ldflags="-s -w -X main.version=${{ inputs.version }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -trimpath \
            -tags="netgo osusergo" \
            -o "dist/tdm-darwin-amd64" \
            .

      - name: Build for macOS ARM64 (Apple Silicon)
        env:
          CGO_ENABLED: 0
          GOOS: darwin
          GOARCH: arm64
        run: |
          go build \
            -ldflags="-s -w -X main.version=${{ inputs.version }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -trimpath \
            -tags="netgo osusergo" \
            -o "dist/tdm-darwin-arm64" \
            .

      - name: Build for Windows AMD64
        env:
          CGO_ENABLED: 0
          GOOS: windows
          GOARCH: amd64
        run: |
          go build \
            -ldflags="-s -w -X main.version=${{ inputs.version }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -trimpath \
            -tags="netgo osusergo" \
            -o "dist/tdm-windows-amd64.exe" \
            .

      - name: Verify builds
        run: |
          echo "Built binaries:"
          ls -la dist/
          
          echo "File types:"
          file dist/*

      - name: Create and Push Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ inputs.version }} -a -m "Release ${{ inputs.version }}"
          git push origin ${{ inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: Release ${{ inputs.version }}
          draft: ${{ inputs.create_draft }}
          prerelease: false
          generate_release_notes: true
          files: dist/*
          body: |
            ## Release ${{ inputs.version }}
            
            ### Downloads
            Choose the appropriate binary for your platform:
            
            - **Linux (x64)**: `tdm-linux-amd64`
            - **macOS (Intel)**: `tdm-darwin-amd64`  
            - **macOS (Apple Silicon)**: `tdm-darwin-arm64`
            - **Windows (x64)**: `tdm-windows-amd64.exe`
            
            ### Installation
            1. Download the binary for your platform
            2. Make it executable: `chmod +x tdm-*` (Linux/macOS)
            3. Move to your PATH: `mv tdm-* /usr/local/bin/tdm` (or add current directory to PATH)
            
            ### macOS Security Notice
            If you see "Apple could not verify this app is free of malware":
            
            **Quick fix:**
            ```bash
            xattr -d com.apple.quarantine tdm-darwin-*
            chmod +x tdm-darwin-*
            ```
            
            **Or through System Settings:**
            1. Try to run the binary
            2. Go to **System Settings > Privacy & Security**
            3. Scroll to **Security** section  
            4. Click **"Open Anyway"** next to the blocked app message
            
            ### Windows Security Notice
            Windows Defender may show a warning. Click "More info" then "Run anyway" if you trust this software.
            
            ---
            
            **Checksums:**
            ```
            $(cd dist && sha256sum * || shasum -a 256 *)
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}